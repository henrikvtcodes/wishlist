// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/server/db/generated"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ItemCategory {
  tech     @map("tech")
  clothing @map("clothing")
  tools    @map("tools")
  legos    @map("legos")
}

enum ItemType {
  SMALL  @map("base") // $0 - $50
  MEDIUM @map("medium") // $50 - $100
  LARGE  @map("high") // $100 - $200
}

enum ItemVendor {
  Amazon
  HomeDepot
  Lego
  BHPhoto
  Other
}

model Item {
  id          String     @id @default(cuid())
  name        String
  description String
  imgUrl      String
  itemUrl     String
  vendor      ItemVendor
  priceCents  Int
  createdAt   DateTime

  category ItemCategory
  type     ItemType

  isClaimable Boolean    @default(true)
  isClaimed   Boolean    @default(false)
  claimedAt   DateTime?
  claimerId   String?
  claimer     Referrers? @relation(references: [id], fields: [claimerId], onDelete: SetNull)
}

model Referrers {
  id   String @id @default(cuid())
  name String
  ref  String @unique

  claimedItems Item[]

  @@index([ref])
}
